// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameConnectionClient is the client API for GameConnection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameConnectionClient interface {
	UpdateData(ctx context.Context, opts ...grpc.CallOption) (GameConnection_UpdateDataClient, error)
	RemoveHeroes(ctx context.Context, opts ...grpc.CallOption) (GameConnection_RemoveHeroesClient, error)
}

type gameConnectionClient struct {
	cc grpc.ClientConnInterface
}

func NewGameConnectionClient(cc grpc.ClientConnInterface) GameConnectionClient {
	return &gameConnectionClient{cc}
}

func (c *gameConnectionClient) UpdateData(ctx context.Context, opts ...grpc.CallOption) (GameConnection_UpdateDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameConnection_ServiceDesc.Streams[0], "/blt.adoptahero.GameConnection/UpdateData", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameConnectionUpdateDataClient{stream}
	return x, nil
}

type GameConnection_UpdateDataClient interface {
	Send(*UpdateHeroMessage) error
	Recv() (*CountResponse, error)
	grpc.ClientStream
}

type gameConnectionUpdateDataClient struct {
	grpc.ClientStream
}

func (x *gameConnectionUpdateDataClient) Send(m *UpdateHeroMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameConnectionUpdateDataClient) Recv() (*CountResponse, error) {
	m := new(CountResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameConnectionClient) RemoveHeroes(ctx context.Context, opts ...grpc.CallOption) (GameConnection_RemoveHeroesClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameConnection_ServiceDesc.Streams[1], "/blt.adoptahero.GameConnection/RemoveHeroes", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameConnectionRemoveHeroesClient{stream}
	return x, nil
}

type GameConnection_RemoveHeroesClient interface {
	Send(*RemoveHeroMessage) error
	CloseAndRecv() (*CountResponse, error)
	grpc.ClientStream
}

type gameConnectionRemoveHeroesClient struct {
	grpc.ClientStream
}

func (x *gameConnectionRemoveHeroesClient) Send(m *RemoveHeroMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameConnectionRemoveHeroesClient) CloseAndRecv() (*CountResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CountResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameConnectionServer is the server API for GameConnection service.
// All implementations must embed UnimplementedGameConnectionServer
// for forward compatibility
type GameConnectionServer interface {
	UpdateData(GameConnection_UpdateDataServer) error
	RemoveHeroes(GameConnection_RemoveHeroesServer) error
	mustEmbedUnimplementedGameConnectionServer()
}

// UnimplementedGameConnectionServer must be embedded to have forward compatible implementations.
type UnimplementedGameConnectionServer struct {
}

func (UnimplementedGameConnectionServer) UpdateData(GameConnection_UpdateDataServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateData not implemented")
}
func (UnimplementedGameConnectionServer) RemoveHeroes(GameConnection_RemoveHeroesServer) error {
	return status.Errorf(codes.Unimplemented, "method RemoveHeroes not implemented")
}
func (UnimplementedGameConnectionServer) mustEmbedUnimplementedGameConnectionServer() {}

// UnsafeGameConnectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameConnectionServer will
// result in compilation errors.
type UnsafeGameConnectionServer interface {
	mustEmbedUnimplementedGameConnectionServer()
}

func RegisterGameConnectionServer(s grpc.ServiceRegistrar, srv GameConnectionServer) {
	s.RegisterService(&GameConnection_ServiceDesc, srv)
}

func _GameConnection_UpdateData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameConnectionServer).UpdateData(&gameConnectionUpdateDataServer{stream})
}

type GameConnection_UpdateDataServer interface {
	Send(*CountResponse) error
	Recv() (*UpdateHeroMessage, error)
	grpc.ServerStream
}

type gameConnectionUpdateDataServer struct {
	grpc.ServerStream
}

func (x *gameConnectionUpdateDataServer) Send(m *CountResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameConnectionUpdateDataServer) Recv() (*UpdateHeroMessage, error) {
	m := new(UpdateHeroMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GameConnection_RemoveHeroes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameConnectionServer).RemoveHeroes(&gameConnectionRemoveHeroesServer{stream})
}

type GameConnection_RemoveHeroesServer interface {
	SendAndClose(*CountResponse) error
	Recv() (*RemoveHeroMessage, error)
	grpc.ServerStream
}

type gameConnectionRemoveHeroesServer struct {
	grpc.ServerStream
}

func (x *gameConnectionRemoveHeroesServer) SendAndClose(m *CountResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameConnectionRemoveHeroesServer) Recv() (*RemoveHeroMessage, error) {
	m := new(RemoveHeroMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameConnection_ServiceDesc is the grpc.ServiceDesc for GameConnection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameConnection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blt.adoptahero.GameConnection",
	HandlerType: (*GameConnectionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateData",
			Handler:       _GameConnection_UpdateData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RemoveHeroes",
			Handler:       _GameConnection_RemoveHeroes_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "game.proto",
}
